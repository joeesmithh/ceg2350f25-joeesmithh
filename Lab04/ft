#!/bin/bash

# ---------------- GLOBAL VARIABLES --------------- #
save_file="$HOME/.finances"
save_path=$(realpath "$save_file")
arg1=$1
arg2=$2

# ----------------- FUNCTION DEFS ----------------- #

# Returns the user 'guide' string
user-guide () {
	echo "Usage: $(basename "$0") <ACTION> [RECORD]"
	echo "This script allows the user to add, remove, view, or clear"
	echo "finance records in the $save_path file."
	echo ""
	echo "Arguments:"
	echo "  ACTION"
	echo "          Required argument representing an action to perform on $save_path"
	echo "          add [RECORD]    - Append RECORD to $save_path"
	echo "                            Prompt for entry if no RECORD given"
	echo "          remove [RECORD] - Remove lines matching RECORD pattern from $save_path"
	echo "                            Prompt for entry if no RECORD given"
	echo "          view            - View contents of $save_path"
	echo "          clear           - Remove $save_path file"
	echo "          help            - Output documentation"
	echo ""
	echo "  RECORD"
	echo "          A finance record comprising a string followed by a floating-point value."
	echo "          Optional for ACTION=add,remove"
	echo "          For <remove>, the argument can be any non-zero string"
	echo "          For <add>, the argument must be of form \"<STRING> [-]N+[.N+]\""
	echo "            [] indicates an optional field"
	echo "            N+ indicates 1 or more integer characters [0-9]"
	echo ""
	echo "Examples:"
	echo "  $(basename "$0") add \"McDonald's -2.50\" - Add negative record"
	echo "  $(basename "$0") add \"Paycheck 350\"     - Add positive record"
	echo "  $(basename "$0") view                   - Output: "
	echo "                                      McDonald's -2.50"
	echo "                                      Paycheck 350"
	echo "  $(basename "$0") remove Pay             - Remove \"Paycheck 350\" record"
	echo "  $(basename "$0") remove 50              - Remove both records"
	echo "  $(basename "$0") add                    - Prompt for record before addition"
	echo "  $(basename "$0") remove                 - Prompt for record before removal"
	echo "  $(basename "$0") clear                  - Delete $save_path file"
}

# Validate and return user's second argument as record description and amount
validate-record () {

	# Loop while second argument is either empty or not of correct form.
	#
	# To validate record argument of form "RECORD {-}00{.00}":
	# 			.*" "+  # Match one or more character before one or more space character
	# 			   \-?	# Negative sign optional
	# 	   [0-9][1-9]*  # Match zero or more characters between 1-9 after a character 0-9
	# (\.[0-9][1-9]*)?  # If optional decimal input, match zero or more 1-9 after 0-9
	while [[ -z $arg2 || ! $arg2 =~ ^.+" "+\-?[0-9][0-9]*(\.[0-9][0-9]*)?$ ]]; do
		# Output error prompt and read new input
		printf -v error "Invalid record!\nTry again (no quotes necessary): "
		read -r -p "$error" arg2
	done

	echo "$arg2"
}

# Validate and return user's second argument as record description only
validate-record-description () {

	# Loop while second argument is empty
	while [ -z "$arg2" ]; do
		# Output error prompt and read new input
		printf -v error "Empty record description!\nTry again (no quotes necessary): "
		read -r -p "$error" arg2
	done

	echo "$arg2"
}

# Add a record to finances
add () {
	# Validate and save record to file
	record="$(validate-record)"
	echo "$record" >> "$save_file"

	# Output save path
	printf "Saved \"%s\" to %s\n" "$record" "$save_path"
}

# Remove a record to finances
remove () {
	# Validate whether a record description was given
	record="$(validate-record-description)"

	# If no matches in .finances
	matching_lines=$(grep "$record" "$save_file")
	if [ -z "$matching_lines" ]
	then
		printf "Remove unsuccessful! No records matching description \"%s.\"\n" "$record"
	else
		# Create string with lines of .finances not including those with record description
		finances_no_record=$(grep -v "$record" "$save_file")
		printf "Removed \"%s\" from %s\n" "$matching_lines" "$save_path"

		# Overwrite .finances with new string if it doesn't consist of only a newline character
		if [ -n "$finances_no_record" ]
		then
			echo "$finances_no_record" > "$save_file"
		else
			echo -n "Last record removed! "
			clear
		fi

	fi
}

# View all finance records
view () {
	cat "$save_path"
}

# Clear all finance records
clear () {
	rm "$save_file"
	echo "Deleted $save_path"
}

# Output user guide to console
help () {
	user-guide
}

# -------------------- PROGRAM -------------------- #

# Validate first argument
case $arg1 in

	"add")
	add
	;;

	"remove")
	remove
	;;

	"view")
	view
	;;

	"clear")
	clear
	;;

	"help")
	help
	;;

	*)
	echo "Invalid argument!"
	help
	;;

esac